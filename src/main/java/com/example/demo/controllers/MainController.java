package com.example.demo.controllers;


import com.example.demo.dataToFront.WeatherToFront;
import com.example.demo.repos.*;
import com.example.demo.tables.tblAdminCodes;
import com.example.demo.tables.tblLocationUserRelations;
import com.example.demo.tables.tblLocations;
import com.example.demo.tables.tblUsers;
import com.example.demo.weatherHandle.WeatherApiClient;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/WeatherAppDB") // This means URL's start with /demo (after Application path)
public class MainController {

    // This means to get the bean called userRepository
// Which is auto-generated by Spring, we will use it to handle the data
    //Подключаю таблицы
    @Autowired
    private tblLocationUserRelationsRepo LocationUserRelationsRepo;
    @Autowired
    private tblUsersRepo UsersRepo;
    @Autowired
    private tblAdminCodesRepo AdminCodesRepo;
    @Autowired
    private tblLocationsRepo LocationsRepo;
    @Autowired
    private tblCustomTriggersRepo CustomTriggersRepo;
    @Autowired
    private tblDefaultTriggersRepo DefaultTriggersRepo;
    @Autowired
    private tblAutoRequestHistoryRepo AutoRequestHistoryRepo;
    @Autowired
    private tblReplyWeatherRepo ReplyWeatherRepo;
    private final WeatherApiClient weatherApiClient;

    public MainController(WeatherApiClient weatherApiClient) {
        this.weatherApiClient = weatherApiClient;
    }


    @PostMapping(path = "/auth")
    public ResponseEntity<?> authUser(
            @RequestParam String login,
            @RequestParam String password) {
        List<tblUsers> allUsers = (List<tblUsers>) UsersRepo.findAll();
        for (tblUsers user : allUsers) {
            System.out.println(Objects.equals(user.getMail(), login));
            if ((user.getPhone_number().toString().equals(login) || Objects.equals(user.getMail(), login)) && Objects.equals(user.getPassword(), password)) {
                return new ResponseEntity<>(user.getUser_id(), HttpStatus.OK);
            }
        }
        return new ResponseEntity<>("User was not found.", HttpStatus.NOT_FOUND);
    }

    @PostMapping(path = "/getForecast")
    public ResponseEntity<?> getLocationsWeatherSeven(
            @RequestParam Integer user_id
    ) throws ParseException, JsonProcessingException {
        List<tblLocationUserRelations> allRelations = (List<tblLocationUserRelations>) LocationUserRelationsRepo.findAll();
        List<WeatherToFront> allWeatherToFront = new ArrayList<>();

        for (tblLocationUserRelations relation : allRelations) {
            if (Objects.equals(relation.getUserId().getUser_id(), user_id)) {
                tblLocations currentLocation = relation.getLocations();
                WeatherToFront toFront = new WeatherToFront();
                toFront.setLocation(currentLocation.getLocation_name());
                WeatherToFront prepare = weatherApiClient.getWeatherSeven(currentLocation.getLat(), currentLocation.getLon());
                toFront.setWeather(prepare.getWeather());
                allWeatherToFront.add(toFront);
            }
        }
        if (allWeatherToFront.isEmpty()) {
            return new ResponseEntity<>("User or locations were not found.", HttpStatus.NOT_FOUND);
        } else {
            return new ResponseEntity<>(allWeatherToFront, HttpStatus.OK);
        }

    }

    @PostMapping(path = "/add/user") // Map ONLY POST Requests
    public @ResponseBody Integer addNewUser( // @ResponseBody means the returned String is the response, not a view name
                                             @RequestParam String name,
                                             @RequestParam String surname,
                                             @RequestParam Long phone_number,
                                             @RequestParam String email,
                                             @RequestParam String password,
                                             @RequestParam Byte root) {
        // @RequestParam means it is a parameter from the GET or POST request

        tblUsers user = new tblUsers();
        user.setName(name);
        user.setSurname(surname);
        user.setPhone_number(phone_number);
        user.setMail(email);
        user.setPassword(password);
        user.setRoot(root);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        user.setRegistr_date(java.sql.Date.valueOf(dateFormat.format(date)));
        user = UsersRepo.save(user);
        System.out.println("USER ID:" + user.getUser_id());

        return user.getUser_id();
    }

    @PostMapping(path = "/add/AdminCode")
    public @ResponseBody ResponseEntity<?> addAdminCode(
            @RequestParam Integer user_id,
            @RequestParam String code) {

        tblAdminCodes admin = new tblAdminCodes();
        Optional<tblUsers> user = UsersRepo.findById(user_id);
        user.map(User -> {
            if (User.getRoot() == 1) {
                admin.setCode(code);
                admin.setAdminUsers(User);
                AdminCodesRepo.save(admin);
                return new ResponseEntity<>("Code was saved", HttpStatus.OK);
            } else {
                return new ResponseEntity<>("User is not admin", HttpStatus.CONFLICT);
            }
        });
        return new ResponseEntity<>("Admin was not found", HttpStatus.NOT_FOUND);
    }

    //Чтение всех полей в таблтцах
    @GetMapping(path = "/all/tblUsers")
    public @ResponseBody Iterable<tblUsers> getAllUsers() {
        // This returns a JSON or XML with the users
        return UsersRepo.findAll();
    }

}